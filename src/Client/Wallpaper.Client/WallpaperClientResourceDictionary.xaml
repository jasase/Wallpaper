<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:local="clr-namespace:Plugin.Application.Wallpaper.Client"
                    xmlns:views="clr-namespace:Plugin.Application.Wallpaper.Client.Views" 
                    xmlns:tb="http://www.hardcodet.net/taskbar">

    <DataTemplate DataType="{x:Type views:PopupViewModel}">
        <local:PopupView />
    </DataTemplate>

    <DataTemplate DataType="{x:Type views:NotConnectedPopupViewModel}">
        <views:NotConnectedPopupView />
    </DataTemplate>

    <tb:TaskbarIcon x:Key="WallpaperNotifyIcon"
                    IconSource="images.ico"
                    MenuActivation="RightClick"                    
                    ToolTipText="Wallpaper Client">
        <tb:TaskbarIcon.ContextMenu>
            <ContextMenu>

                <MenuItem IsEnabled="False">
                    <MenuItem.Header>
                        <TextBlock FontWeight="Bold" Text="{Binding VersionNumber, StringFormat=SWS {0}}" />
                    </MenuItem.Header>
                </MenuItem>

                <Separator/>

                <MenuItem IsCheckable="True" IsChecked="{Binding IsAutostartActive,Mode=OneWay}" Command="{Binding ChangeAutostartCommand}" Header="Autostart" />
                <MenuItem Command="{Binding ResetViewCommand}" Header="Reset Monitors" />
                <MenuItem Command="{Binding LoginCommand}" >
                    <MenuItem.Style>
                        <Style TargetType="MenuItem">
                            <Setter Property="Header" Value="Login" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding State.IsLoggedIn}" Value="True">
                                    <Setter Property="Header">
                                        <Setter.Value>
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock Text="{Binding State.Username}" />
                                                <TextBlock Text=" : Sign Out" />
                                            </StackPanel>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </MenuItem.Style>
                </MenuItem>
                <MenuItem Command="{Binding ExecuteUpdateCommand}" Header="{Binding Path=UpdateMenuEntry}">
                    <!--<MenuItem.Header>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Update: " />
                            <TextBlock Text="{Binding UpdateMenuEntry}" />
                        </StackPanel>
                    </MenuItem.Header>-->
                </MenuItem>
                <MenuItem Header="Schließen" Command="{Binding ExitCommand}" />


            </ContextMenu>
        </tb:TaskbarIcon.ContextMenu>
        <tb:TaskbarIcon.TrayPopup>
            <ContentPresenter Content="{Binding Path=State.PopupViewModel}" />
        </tb:TaskbarIcon.TrayPopup>
    </tb:TaskbarIcon>

    <Style x:Key="IconButtonStyle"
               TargetType="{x:Type Button}">
        <!-- set some default values -->
        <Setter Property="Background"
                    Value="Transparent" />
        <Setter Property="BorderBrush"
                    Value="Transparent" />
        <!-- set the visual tree of the control -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <!-- here come the actual sub-controls -->
                    <Border x:Name="border"
                                Height="{TemplateBinding Height}"
                                Width="{TemplateBinding Width}"
                                SnapsToDevicePixels="True"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1"
                                Padding="0"
                                CornerRadius="3,3,3,3">
                        <Border x:Name="innerBorder"
                                    SnapsToDevicePixels="True"
                                    BorderThickness="1"
                                    Padding="2"
                                    CornerRadius="3,3,3,3">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  RecognizesAccessKey="True"
                                                  Margin="{TemplateBinding Padding}">
                                <ContentPresenter.Effect>
                                    <!-- give the content a bit of shadow -->
                                    <DropShadowEffect x:Name="shadow"
                                                          ShadowDepth="2"
                                                          Opacity="0.7"
                                                          BlurRadius="3" />
                                </ContentPresenter.Effect>
                                <ContentPresenter.RenderTransform>
                                    <!-- push the content a bit to the left and the top -->
                                    <TranslateTransform x:Name="translation"
                                                            X="-1"
                                                            Y="-1" />
                                </ContentPresenter.RenderTransform>
                            </ContentPresenter>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- 
                                the triggers define the reactions to various state
                                changes
                            -->
                        <Trigger Property="IsKeyboardFocused"
                                     Value="true">
                            <Setter TargetName="innerBorder"
                                        Property="BorderBrush"
                                        Value="#ff06cdff" />
                            <Setter Property="Background"
                                        Value="LightBlue" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                     Value="true">
                            <Setter Property="Background"
                                        Value="LightBlue" />
                        </Trigger>
                        <!-- when the control is disabled, just let the background shine through -->
                        <Trigger Property="IsEnabled"
                                     Value="false">
                            <Setter Property="Opacity"
                                        Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                     Value="True">
                            <!-- This Trigger manages the Animation of the button's content and its shadow -->
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0"
                                                             To="0"
                                                             Storyboard.TargetName="shadow"
                                                             Storyboard.TargetProperty="(DropShadowEffect.ShadowDepth)" />
                                        <DoubleAnimation Duration="0:0:0"
                                                             To="0"
                                                             Storyboard.TargetName="translation"
                                                             Storyboard.TargetProperty="(TranslateTransform.X)" />
                                        <DoubleAnimation Duration="0:0:0"
                                                             To="0"
                                                             Storyboard.TargetName="translation"
                                                             Storyboard.TargetProperty="(TranslateTransform.Y)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0"
                                                             To="1"
                                                             Storyboard.TargetName="shadow"
                                                             Storyboard.TargetProperty="(DropShadowEffect.ShadowDepth)" />
                                        <DoubleAnimation Duration="0:0:0"
                                                             To="-1"
                                                             Storyboard.TargetName="translation"
                                                             Storyboard.TargetProperty="(TranslateTransform.X)" />
                                        <DoubleAnimation Duration="0:0:0"
                                                             To="-1"
                                                             Storyboard.TargetName="translation"
                                                             Storyboard.TargetProperty="(TranslateTransform.Y)" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
